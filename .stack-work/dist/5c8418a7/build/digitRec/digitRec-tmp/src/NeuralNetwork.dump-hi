
==================== FINAL INTERFACE ====================
2018-08-08 14:24:56.886632 UTC

interface main:NeuralNetwork 8022
  interface hash: 273c607d17ef933eafe790a175dccc14
  ABI hash: 01de0c92e2a8c1b8b2b2f7d968002413
  export-list hash: 880191293dbf72c9005d5a2546c62fd5
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 301d5f8d0df098dd5e9c7328943f9dbc
  sig of: Nothing
  used TH splices: False
  where
exports:
  NeuralNetwork.bmt
  NeuralNetwork.computeLayer
  NeuralNetwork.newNNet
  NeuralNetwork.runNNet
  NeuralNetwork.ActivationFunction{NeuralNetwork.ActivationFunction acFunc acFunc' description}
  NeuralNetwork.Bias
  NeuralNetwork.NeuralNet
  NeuralNetwork.Weights
module dependencies:
package dependencies: Win32-2.5.4.1 array-0.5.2.0 base-4.10.1.0*
                      deepseq-1.4.3.0 ghc-prim-0.5.1.1 integer-gmp-1.0.1.0 random-1.1*
                      time-1.8.0.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: base-4.10.1.0:Control.Applicative
                         base-4.10.1.0:Data.Complex base-4.10.1.0:Data.Either
                         base-4.10.1.0:Data.Functor.Compose base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
import  -/  base-4.10.1.0:Control.Monad 0557f10d93e84201ae1d619074f2aa0b
import  -/  base-4.10.1.0:Data.Foldable 4349255461f1285ad885cd2301205c36
import  -/  base-4.10.1.0:Data.Functor b59a97e639e05373a94999f9bb899676
import  -/  base-4.10.1.0:Data.List e5312e282ad78d8152090e079f862b53
import  -/  base-4.10.1.0:GHC.Base 8f949d675e49677c272f02ab7a85fe18
import  -/  base-4.10.1.0:GHC.Float 43dc07b724c1ee0ff9bb01bb47964564
import  -/  base-4.10.1.0:GHC.List 1bb0adf79553530dc898796596e53188
import  -/  base-4.10.1.0:GHC.Num bee60808f8127e4cda82dd422aa1c6c0
import  -/  base-4.10.1.0:Prelude a93a9400cc0c816c2ee5f39399baa7a0
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  random-1.1:System.Random 51fb561c639e37ae48a8c45d441a262a
f25da9f2a5b60a07f38de168abde5f0a
  $tc'ActivationFunction :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12145138354609904147##
                   4761844431112352262##
                   NeuralNetwork.$trModule
                   NeuralNetwork.$tc'ActivationFunction2
                   0#
                   NeuralNetwork.$tc'ActivationFunction1) -}
3684b002b98af671c7f7a6bacb975614
  $tc'ActivationFunction1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fb7e2d8e66371290153c96dad94f9737
  $tc'ActivationFunction2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   NeuralNetwork.$tc'ActivationFunction3) -}
bb322cecc41c5eb22a9bb2f5edb3ec60
  $tc'ActivationFunction3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ActivationFunction"#) -}
837bfc8bb778a5dad201b73745869033
  $tcActivationFunction :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9944493699488289610##
                   11960223508223460166##
                   NeuralNetwork.$trModule
                   NeuralNetwork.$tcActivationFunction1
                   0#
                   GHC.Types.krep$*) -}
a86d3b6df10feff348dca53b1f99d6e1
  $tcActivationFunction1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   NeuralNetwork.$tcActivationFunction2) -}
5aace53a67a1562006508812b3fc6464
  $tcActivationFunction2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ActivationFunction"#) -}
8391784ed5b069ad9079a1743348ac90
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   NeuralNetwork.$trModule3
                   NeuralNetwork.$trModule1) -}
1e5ee3294c7558257e34598f62d932c9
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS NeuralNetwork.$trModule2) -}
4c8eeef670d85a7bdd9b67b596d8166b
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NeuralNetwork"#) -}
0b15234a50af56a89617a334b6cd7ba1
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS NeuralNetwork.$trModule4) -}
8a26d4e2d2ec337f7ebd9f0c14e5125b
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
f7734d39e6ea0bed7ba695e08d8f2447
  $wcomputeLayer ::
    [GHC.Types.Double]
    -> NeuralNetwork.Bias
    -> NeuralNetwork.Weights
    -> [GHC.Types.Double]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (w :: [GHC.Types.Double])
                   (ww :: NeuralNetwork.Bias)
                   (ww1 :: NeuralNetwork.Weights) ->
                 GHC.List.zipWith
                   @ GHC.Types.Double
                   @ GHC.Types.Double
                   @ GHC.Types.Double
                   GHC.Float.plusDouble
                   ww
                   (GHC.Base.map
                      @ [GHC.Types.Double]
                      @ GHC.Types.Double
                      (\ (x1 :: [GHC.Types.Double]) -> NeuralNetwork.$wgo2 w x1 0.0##)
                      ww1)) -}
154e726c4bdab5b466beb45eadbb0714
  $wgo2 ::
    [GHC.Types.Double]
    -> [GHC.Types.Double] -> GHC.Prim.Double# -> GHC.Types.Double
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U><S,U>m,
     Inline: [0] -}
2321c528d82d4cd96aae6cc890f996f0
  data ActivationFunction
    = ActivationFunction {acFunc :: GHC.Types.Double
                                    -> GHC.Types.Double,
                          acFunc' :: GHC.Types.Double -> GHC.Types.Double,
                          description :: GHC.Base.String}
93cbaa568d608058a84eda9381068fdd
  type Bias = [GHC.Types.Double]
6efaf6673db0e5b81556d3abc3a4c697
  type NeuralNet = [(NeuralNetwork.Bias, NeuralNetwork.Weights)]
94d07ea43f7c78a759a2c292cad465d9
  type Weights = [[GHC.Types.Double]]
2321c528d82d4cd96aae6cc890f996f0
  acFunc ::
    NeuralNetwork.ActivationFunction
    -> GHC.Types.Double -> GHC.Types.Double
  RecSel Left NeuralNetwork.ActivationFunction
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: NeuralNetwork.ActivationFunction) ->
                 case ds of wild { NeuralNetwork.ActivationFunction ds1 ds2 ds3 ->
                 ds1 }) -}
2321c528d82d4cd96aae6cc890f996f0
  acFunc' ::
    NeuralNetwork.ActivationFunction
    -> GHC.Types.Double -> GHC.Types.Double
  RecSel Left NeuralNetwork.ActivationFunction
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: NeuralNetwork.ActivationFunction) ->
                 case ds of wild { NeuralNetwork.ActivationFunction ds1 ds2 ds3 ->
                 ds2 }) -}
371299ceeff7507124527a1066fd8dff
  bmt :: GHC.Types.Double -> GHC.Types.IO GHC.Types.Double
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                NeuralNetwork.bmt1
                  `cast`
                (<GHC.Types.Double>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Double>_R)) -}
e45a80ec12a23c21d5c55d2200bbbbfb
  bmt1 ::
    GHC.Types.Double
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Double #)
  {- Arity: 2, Strictness: <L,1*U(U)><S,U>,
     Unfolding: (\ (dev :: GHC.Types.Double)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Random.theStdGen
                        `cast`
                      (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef r# ->
                 case GHC.Prim.atomicModifyMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        @ (System.Random.StdGen, GHC.Types.Double)
                        @ GHC.Types.Double
                        r#
                        System.Random.$fRandomDouble2
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of b1 { GHC.Types.D# ipv2 ->
                 case GHC.Prim.atomicModifyMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        @ (System.Random.StdGen, GHC.Types.Double)
                        @ GHC.Types.Double
                        r#
                        System.Random.$fRandomDouble2
                        ipv of ds2 { (#,#) ipv4 ipv5 ->
                 case ipv5 of b2 { GHC.Types.D# ipv6 ->
                 (# ipv4,
                    case dev of wild2 { GHC.Types.D# x1 ->
                    case GHC.Prim.logDouble# ipv2 of wild3 { DEFAULT ->
                    GHC.Types.D#
                      (GHC.Prim.*##
                         (GHC.Prim.*##
                            x1
                            (GHC.Prim.sqrtDouble#
                               (GHC.Prim.negateDouble# (GHC.Prim.+## wild3 wild3))))
                         (GHC.Prim.cosDouble#
                            (GHC.Prim.*## 6.283185307179586## ipv6))) } } #) } } } } }) -}
6914b9a69dd3a08796c93c74b53f93e9
  computeLayer ::
    [GHC.Types.Double]
    -> (NeuralNetwork.Bias, NeuralNetwork.Weights)
    -> [GHC.Types.Double]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S(SL),1*U(1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [GHC.Types.Double])
                   (w1 :: (NeuralNetwork.Bias, NeuralNetwork.Weights)) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 NeuralNetwork.$wcomputeLayer w ww1 ww2 }) -}
2321c528d82d4cd96aae6cc890f996f0
  description :: NeuralNetwork.ActivationFunction -> GHC.Base.String
  RecSel Left NeuralNetwork.ActivationFunction
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: NeuralNetwork.ActivationFunction) ->
                 case ds of wild { NeuralNetwork.ActivationFunction ds1 ds2 ds3 ->
                 ds3 }) -}
b7f3e3a1ce7abf6f5acdf7a53d1a83f5
  newNNet :: [GHC.Types.Int] -> GHC.Types.IO NeuralNetwork.NeuralNet
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                NeuralNetwork.newNNet1
                  `cast`
                (<[GHC.Types.Int]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <NeuralNetwork.NeuralNet>_R)) -}
1ace3a8df469448f0076b04d0b542a22
  newNNet1 ::
    [GHC.Types.Int]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          NeuralNetwork.NeuralNet #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (dims :: [GHC.Types.Int])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case dims of wild {
                   []
                   -> case NeuralNetwork.newNNet3
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                NeuralNetwork.NeuralNet #)
                      of {}
                   : ds xs
                   -> case NeuralNetwork.newNNet2
                             wild
                             xs
                             eta of ds1 { (#,#) ipv ipv1 ->
                      (# ipv, NeuralNetwork.newNNet_go xs ipv1 #) } }) -}
c7aba0197897639570b761c310e0ec28
  newNNet2 ::
    [GHC.Types.Int]
    -> [GHC.Types.Int]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [[[GHC.Types.Double]]] #)
  {- Arity: 3, Strictness: <S,1*U><L,1*U><S,U> -}
5551f601f289a21a0fd86a558df1660d
  newNNet3 :: GHC.Types.IO NeuralNetwork.NeuralNet
  {- Strictness: x -}
d317c5f76c299360829eba3369c83969
  newNNet_go ::
    [GHC.Types.Int]
    -> [[[GHC.Types.Double]]]
    -> [([GHC.Types.Double], [[GHC.Types.Double]])]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
54570bce56d925ba5e10eab063023778
  runNNet ::
    [GHC.Types.Double]
    -> NeuralNetwork.NeuralNet
    -> NeuralNetwork.ActivationFunction
    -> [GHC.Types.Double]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><S,1*U><L,1*U(1*C(U),A,A)>,
     Unfolding: (\ (input :: [GHC.Types.Double])
                   (net :: NeuralNetwork.NeuralNet)
                   (ac :: NeuralNetwork.ActivationFunction) ->
                 let {
                   f :: GHC.Types.Double -> GHC.Types.Double
                   = case ac of wild { NeuralNetwork.ActivationFunction ds ds1 ds2 ->
                     ds }
                 } in
                 letrec {
                   go :: [(NeuralNetwork.Bias, NeuralNetwork.Weights)]
                         -> [GHC.Types.Double] -> [GHC.Types.Double]
                     <join 2> {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ (ds :: [(NeuralNetwork.Bias, NeuralNetwork.Weights)])
                       (eta :: [GHC.Types.Double]) ->
                     case ds of wild {
                       [] -> eta
                       : y ys
                       -> case eta of z { DEFAULT ->
                          case y of ww { (,) ww1 ww2 ->
                          go
                            ys
                            (GHC.Base.map
                               @ GHC.Types.Double
                               @ GHC.Types.Double
                               f
                               (NeuralNetwork.$wcomputeLayer z ww1 ww2)) } } }
                 } in
                 go net input) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

