
==================== FINAL INTERFACE ====================
2018-08-08 18:33:26.290313 UTC

interface main:Teaching 8022
  interface hash: b1d468cf8ea5f9571be213e361dddd5d
  ABI hash: 9b6c0f6f817608c2f84f024478437c21
  export-list hash: 9663c934385a16c9590ceda3b54b349e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 301d5f8d0df098dd5e9c7328943f9dbc
  sig of: Nothing
  used TH splices: False
  where
exports:
  Teaching.classify
  Teaching.digPath
  Teaching.digitsToBeTested
  Teaching.digitsToBeTrained
  Teaching.labPath
  Teaching.reLu
  Teaching.reLu'
  Teaching.reLuAcF
  Teaching.saveNetPath
  Teaching.teach
  Teaching.teachNet
  Teaching.testAccuracy
  Teaching.testLabPath
  Teaching.testNet
  Teaching.testPath
module dependencies: MNIST NeuralNetwork Training
package dependencies: MonadRandom-0.5.1.1 Win32-2.5.4.1
                      array-0.5.2.0 base-4.10.1.0* bytestring-0.10.8.2* deepseq-1.4.3.0
                      ghc-prim-0.5.1.1 integer-gmp-1.0.1.0 mtl-2.2.2 primitive-0.6.3.0
                      random-1.1* random-shuffle-0.0.4 time-1.8.0.2 transformers-0.5.2.0
orphans: transformers-0.5.2.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.10.1.0:GHC.Float
         base-4.10.1.0:GHC.Base
family instance modules: MonadRandom-0.5.1.1:Control.Monad.Trans.Random.Lazy
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats
                         primitive-0.6.3.0:Control.Monad.Primitive
import  -/  base-4.10.1.0:Data.Foldable 4349255461f1285ad885cd2301205c36
import  -/  base-4.10.1.0:Data.List e5312e282ad78d8152090e079f862b53
import  -/  base-4.10.1.0:Data.Ord 38a9281033b0325bcc61a295dc27d0e6
import  -/  base-4.10.1.0:Data.Tuple ab0c62ebfcacf00dcba54934885c5064
import  -/  base-4.10.1.0:GHC.Base 8f949d675e49677c272f02ab7a85fe18
import  -/  base-4.10.1.0:GHC.List 1bb0adf79553530dc898796596e53188
import  -/  base-4.10.1.0:GHC.Num bee60808f8127e4cda82dd422aa1c6c0
import  -/  base-4.10.1.0:GHC.Real 183566a07f0c201dd54a6bc28c33ed14
import  -/  base-4.10.1.0:GHC.Show 927ef590f679632bf94869e8018e5b48
import  -/  base-4.10.1.0:Prelude a93a9400cc0c816c2ee5f39399baa7a0
import  -/  base-4.10.1.0:System.IO 1fb8f1d116df69c8750950ac088a90e6
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy 797320bfb8012e1e94591960fb41f1fe
import  -/  ghc-prim-0.5.1.1:GHC.Classes 64ad5910d03ab188ab9b4adef7487b1e
import  -/  ghc-prim-0.5.1.1:GHC.Types b1fd0716441595db508c1a74387bf394
import  -/  MNIST 619aad6b07b02516c76be59d605d4a12
  exports: bf5e2abd363e4428288b563977b1951c
  getDigits abd426317e32cc43cf206eb020a903c9
  getLabels 5c7336dae8821cb95c6f5f9462202d88
  getLabelsTesting b4a5a8a011fcffc34dfdd0a94978ab02
import  -/  NeuralNetwork 01de0c92e2a8c1b8b2b2f7d968002413
  exports: 880191293dbf72c9005d5a2546c62fd5
  ActivationFunction 1980b09d16dbb511c8bf54f8047fbf4a
  ActivationFunction 2321c528d82d4cd96aae6cc890f996f0
  NeuralNet 6efaf6673db0e5b81556d3abc3a4c697
  acFunc 2321c528d82d4cd96aae6cc890f996f0
  acFunc' 2321c528d82d4cd96aae6cc890f996f0
  description 2321c528d82d4cd96aae6cc890f996f0
  newNNet b7f3e3a1ce7abf6f5acdf7a53d1a83f5
  runNNet 54570bce56d925ba5e10eab063023778
import  -/  Training a484d3acc28017b98a183b52aac299c0
  exports: 71719dbbb374c9442345461a6dfa2921
  learn 987de44db3175748c7195a9f1211816e
import  -/  random-1.1:System.Random 51fb561c639e37ae48a8c45d441a262a
import  -/  random-shuffle-0.0.4:System.Random.Shuffle 5322debe93733276cf0455354daa2836
2395e9aebe29c1cc6b44647e19edfb56
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Teaching.$trModule3
                   Teaching.$trModule1) -}
1b130bbad78c14f570c303b5b426dfa8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Teaching.$trModule2) -}
ff008dc7c73b6f3122d9a78aadfd0843
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Teaching"#) -}
21313df01e722f2a01313fc3ba87ff83
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Teaching.$trModule4) -}
1a3fe35c0197d889a7fbb60e089af106
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
c482534a6057b460b07fec6ae3514045
  $wclassify ::
    NeuralNetwork.NeuralNet
    -> [GHC.Types.Double]
    -> NeuralNetwork.ActivationFunction
    -> GHC.Prim.Int#
  {- Arity: 3, Strictness: <S,1*U><S,1*U><L,1*U(1*C(U),A,A)>,
     Inline: [0],
     Unfolding: (\ (w :: NeuralNetwork.NeuralNet)
                   (w1 :: [GHC.Types.Double])
                   (w2 :: NeuralNetwork.ActivationFunction) ->
                 case Teaching.classify_go
                        0#
                        (NeuralNetwork.runNNet w1 w w2) of wild {
                   [] -> case GHC.List.foldl2 ret_ty GHC.Prim.Int# of {}
                   : x xs
                   -> case x of ww { (,) ww1 ww2 -> Teaching.$wgo xs ww1 ww2 } }) -}
6f37344b1d2c703dd231527587f2ec81
  $wgo ::
    [(GHC.Types.Int, GHC.Types.Double)]
    -> GHC.Types.Int -> GHC.Types.Double -> GHC.Prim.Int#
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(1*U)><L,1*U(U)>, Inline: [0] -}
9553f7a07eb32cd7ec2ddc545dbeb0a7
  $wtestNet ::
    NeuralNetwork.NeuralNet
    -> [[GHC.Types.Double]]
    -> [GHC.Types.Int]
    -> NeuralNetwork.ActivationFunction
    -> GHC.Prim.Int#
  {- Arity: 4, Strictness: <L,U><S,1*U><L,1*U><L,U(C(U),A,A)>,
     Inline: [0],
     Unfolding: (\ (w :: NeuralNetwork.NeuralNet)
                   (w1 :: [[GHC.Types.Double]])
                   (w2 :: [GHC.Types.Int])
                   (w3 :: NeuralNetwork.ActivationFunction) ->
                 letrec {
                   $whelper :: NeuralNetwork.NeuralNet
                               -> [[GHC.Types.Double]]
                               -> [GHC.Types.Int]
                               -> GHC.Prim.Int#
                               -> GHC.Prim.Int#
                     <join 4> {- Arity: 4, Strictness: <L,U><S,1*U><L,1*U><S,U>,
                                 Inline: [0] -}
                   = \ (w4 :: NeuralNetwork.NeuralNet)
                       (w5 :: [[GHC.Types.Double]])
                       (w6 :: [GHC.Types.Int])
                       (ww :: GHC.Prim.Int#) ->
                     case w5 of wild {
                       [] -> ww
                       : x xs
                       -> case w6 of wild1 {
                            [] -> ww
                            : y ys
                            -> case Teaching.$wclassify w4 x w3 of ww1 { DEFAULT ->
                               case y of wild2 { GHC.Types.I# y1 ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.==# ww1 y1) of wild3 {
                                 GHC.Types.False -> $whelper w4 xs ys ww
                                 GHC.Types.True -> $whelper w4 xs ys (GHC.Prim.+# ww 1#) } } } } }
                 } in
                 $whelper w w1 w2 0#) -}
03cce7ee7939d1b1da08d0da0e84ce67
  classify ::
    NeuralNetwork.NeuralNet
    -> [GHC.Types.Double]
    -> NeuralNetwork.ActivationFunction
    -> GHC.Types.Int
  {- Arity: 3, Strictness: <S,1*U><S,1*U><L,1*U(1*C(U),A,A)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: NeuralNetwork.NeuralNet)
                   (w1 :: [GHC.Types.Double])
                   (w2 :: NeuralNetwork.ActivationFunction) ->
                 case Teaching.$wclassify w w1 w2 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
fe591541773a9777541b5b9374310465
  classify_go ::
    GHC.Prim.Int#
    -> [GHC.Types.Double] -> [(GHC.Types.Int, GHC.Types.Double)]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
17dbeff5d58a183a005f04f8a5d66e17
  digPath :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Teaching.digPath1) -}
b3d40261fcf56e69939c0110ed97f9c5
  digPath1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data\\train-images.idx3-ubyte"#) -}
f87ea43c5e5113be57f595db41e6ed34
  digitsToBeTested :: GHC.Types.Int
  {- Strictness: m, Unfolding: (Teaching.digitsToBeTrained) -}
51cbeccc48473c7c23e33f93bf4637de
  digitsToBeTrained :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10000#) -}
3554fbc9db8392fcf91ab78c8792eefe
  labPath :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Teaching.labPath1) -}
0bf12bd12aef54f3f86cac628e0faa73
  labPath1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data\\train-labels.idx1-ubyte"#) -}
513c00ed89fca618999b2a72b81dcb29
  reLu :: GHC.Types.Double -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (y :: GHC.Types.Double) ->
                 case y of wild1 { GHC.Types.D# y1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<=## 0.0## y1) of wild2 {
                   GHC.Types.False -> Teaching.reLu1 GHC.Types.True -> wild1 } }) -}
a6901310d0929679e7e2c1e4ebd00942
  reLu' :: GHC.Types.Double -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Double) ->
                 case x of wild { GHC.Types.D# x1 ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.<## x1 0.0##) of wild1 {
                   GHC.Types.False -> Teaching.reLu'1
                   GHC.Types.True -> Teaching.reLu1 } }) -}
c7a6e541da5fdd3b598f9ee031c86dac
  reLu'1 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 1.0##) -}
e8d64205e5f50f7463f0f86edc7da295
  reLu1 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 0.0##) -}
7f03133f3eb04ce1b4122f85c13a6e4a
  reLuAcF :: NeuralNetwork.ActivationFunction
  {- Strictness: m,
     Unfolding: (NeuralNetwork.ActivationFunction
                   Teaching.reLu
                   Teaching.reLu'
                   Teaching.reLuAcF1) -}
ff024e85551c7b1d308e5eb61af0c066
  reLuAcF1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Teaching.reLuAcF2) -}
b654c29d841c3f2e4b84aefbe28c52b6
  reLuAcF2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Rectifier function"#) -}
d180568e649d3d8327ef75ffbe248929
  saveNetPath :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Teaching.saveNetPath1) -}
5c2ccca2b7c3875c8ea213bfded8a0a5
  saveNetPath1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data\\solutionNet.txt"#) -}
975921c8a66685fbed6066bd4b62950b
  teach :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Teaching.teach1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
1ccafafe1b5289f0d117d0528cea6505
  teach1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case NeuralNetwork.newNNet2
                        Teaching.teach15
                        Teaching.teach_xs
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.FD.openBinaryFile1
                        Teaching.digPath
                        GHC.IO.IOMode.ReadMode
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Data.ByteString.Lazy.getContents2
                        ipv3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.FD.openBinaryFile1
                        Teaching.labPath
                        GHC.IO.IOMode.ReadMode
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case Data.ByteString.Lazy.getContents2
                        ipv7
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case System.Random.theStdGen
                        `cast`
                      (Nth:2
                           (Trans
                                (<GHC.IORef.IORef System.Random.StdGen>_R
                                 ->_R GHC.Types.N:IO[0] <System.Random.StdGen>_R)
                                (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N
                                 ->_R <GHC.Prim.State# GHC.Prim.RealWorld
                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                             System.Random.StdGen #)>_R))) of wild { GHC.STRef.STRef var# ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        var#
                        ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                 let {
                   solution :: NeuralNetwork.NeuralNet
                   = let {
                       arg :: [([GHC.Types.Double], [[GHC.Types.Double]])]
                       = NeuralNetwork.newNNet_go Teaching.teach_xs ipv1
                     } in
                     let {
                       karg :: [[GHC.Types.Double]] = MNIST.$wgetLabels ipv9 9999#
                     } in
                     letrec {
                       $whelper :: GHC.Prim.Int#
                                   -> [[GHC.Types.Double]] -> NeuralNetwork.NeuralNet
                         <join 2> {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0] -}
                       = \ (ww1 :: GHC.Prim.Int#) (w1 :: [[GHC.Types.Double]]) ->
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.>=# ww1 0#) of wild1 {
                           GHC.Types.False -> Teaching.teachNet arg w1 karg Teaching.reLuAcF
                           GHC.Types.True
                           -> $whelper
                                (GHC.Prim.-# ww1 1#)
                                (GHC.Types.:
                                   @ [GHC.Types.Double]
                                   (MNIST.getDigit ipv5 (GHC.Types.I# ww1))
                                   w1) }
                     } in
                     $whelper 9999# (GHC.Types.[] @ [GHC.Types.Double])
                 } in
                 case System.IO.appendFile2
                        @ ()
                        Teaching.saveNetPath
                        GHC.IO.IOMode.WriteMode
                        (\ (hdl :: GHC.IO.Handle.Types.Handle)[OneShot] ->
                         GHC.IO.Handle.Text.hPutStr2
                           hdl
                           (GHC.Show.showList__
                              @ ([GHC.Types.Double], [[GHC.Types.Double]])
                              Teaching.teach11
                              solution
                              (GHC.Types.[] @ GHC.Types.Char))
                           GHC.Types.False)
                          `cast`
                        (<GHC.IO.Handle.Types.Handle>_R
                         ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                        ipv10 of ds7 { (#,#) ipv12 ipv13 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Teaching.teach9
                        GHC.Types.True
                        ipv12 of ds8 { (#,#) ipv14 ipv15 ->
                 Teaching.teach2 solution ipv14 } } } } } } } } }) -}
e82118f5824809dc507dac376b164a3b
  teach10 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Network has been taught. Solution saved to file."#) -}
8a83ae2fe16be13ba5b07149a5a5769b
  teach11 ::
    ([GHC.Types.Double], [[GHC.Types.Double]])
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U)><L,U>m2,
     Unfolding: (\ (w3 :: ([GHC.Types.Double], [[GHC.Types.Double]]))
                   (w4 :: GHC.Base.String)[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)4
                   (GHC.Show.showList__
                      @ GHC.Types.Double
                      GHC.Float.$fShowDouble1
                      ww1
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo1
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w4)
                            (\ (s :: GHC.Base.String)[OneShot] ->
                             GHC.Show.showList__
                               @ [GHC.Types.Double]
                               GHC.Float.$fShowDouble_$cshowList
                               ww2
                               s)
                            (GHC.Types.[] @ GHC.Show.ShowS)))) }) -}
834f16b8c055569fbd3b2878beb8f838
  teach12 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Teaching.teach13
                   (GHC.Types.[] @ GHC.Types.Int)) -}
bb3488df9e80a03512012b866082f089
  teach13 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 10#) -}
79f99411224b7183d0054e8ad4665c4a
  teach14 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 300#) -}
58d7db509870005a1a0665de11462ae9
  teach15 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Teaching.teach16
                   Teaching.teach_xs) -}
42267b0d66231ee907705675fecfdd50
  teach16 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 784#) -}
5553cfd115ad846a06555c7ea6f1b097
  teach2 ::
    NeuralNetwork.NeuralNet
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (net :: NeuralNetwork.NeuralNet)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.FD.openBinaryFile1
                        Teaching.testPath
                        GHC.IO.IOMode.ReadMode
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case Data.ByteString.Lazy.getContents2
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.FD.openBinaryFile1
                        Teaching.testLabPath
                        GHC.IO.IOMode.ReadMode
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case Data.ByteString.Lazy.getContents2
                        ipv5
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (GHC.CString.unpackAppendCString#
                      Teaching.teach8
                      (let {
                         karg :: [GHC.Types.Int] = MNIST.$wgetLabelsTesting ipv7 9999#
                       } in
                       letrec {
                         $whelper :: GHC.Prim.Int#
                                     -> [[GHC.Types.Double]] -> [GHC.Types.Char]
                           <join 2> {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0] -}
                         = \ (ww1 :: GHC.Prim.Int#) (w1 :: [[GHC.Types.Double]]) ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.>=# ww1 0#) of wild {
                             GHC.Types.False
                             -> case Teaching.$wtestNet
                                       net
                                       w1
                                       karg
                                       Teaching.reLuAcF of ww { DEFAULT ->
                                case GHC.Show.$wshowSignedInt
                                       0#
                                       ww
                                       (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                GHC.Base.++
                                  @ GHC.Types.Char
                                  (GHC.Types.: @ GHC.Types.Char ww5 ww6)
                                  (GHC.CString.unpackAppendCString#
                                     Teaching.teach7
                                     (GHC.Base.++
                                        @ GHC.Types.Char
                                        Teaching.teach6
                                        (GHC.CString.unpackAppendCString#
                                           Teaching.teach5
                                           (GHC.Base.++
                                              @ GHC.Types.Char
                                              (GHC.Float.$w$sshowSignedFloat
                                                 GHC.Float.$fShowDouble2
                                                 GHC.Float.minExpt
                                                 (GHC.Prim.*##
                                                    100.0##
                                                    (GHC.Prim./##
                                                       (GHC.Prim.int2Double# ww)
                                                       10000.0##))
                                                 (GHC.Types.[] @ GHC.Types.Char))
                                              Teaching.teach3)))) } }
                             GHC.Types.True
                             -> $whelper
                                  (GHC.Prim.-# ww1 1#)
                                  (GHC.Types.:
                                     @ [GHC.Types.Double]
                                     (MNIST.getDigit ipv3 (GHC.Types.I# ww1))
                                     w1) }
                       } in
                       $whelper 9999# (GHC.Types.[] @ [GHC.Types.Double])))
                   GHC.Types.True
                   ipv6 } } } }) -}
18f651598f503ea4ff5be378988455a7
  teach3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Teaching.teach4) -}
5eda0bc68f2990773900f12b3bc17162
  teach4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("%"#) -}
301536f982ad339d1c5ee20606dbaabe
  teach5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (". Accuracy: "#) -}
77a814b36418ae7f1e068d3f83d20b89
  teach6 :: GHC.Base.String
  {- Unfolding: (case GHC.Show.$wshowSignedInt
                        0#
                        10000#
                        (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                 GHC.Types.: @ GHC.Types.Char ww5 ww6 }) -}
b67855eef5020d0e7e4a8fbece0cb298
  teach7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" Out of "#) -}
cb3ed3d6190e60931baa2d209f5c3f89
  teach8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("The number of correct digits: "#) -}
888488ad3077a1e730ed49f1a33aa06f
  teach9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Teaching.teach10) -}
d9e16eb2e6d1d3089142681f2a0d891a
  teachNet ::
    NeuralNetwork.NeuralNet
    -> [[GHC.Types.Double]]
    -> [[GHC.Types.Double]]
    -> NeuralNetwork.ActivationFunction
    -> NeuralNetwork.NeuralNet
  {- Arity: 4, Strictness: <S,U><S,1*U><S,1*U><L,U(C(U),C(U),A)> -}
d6bdc011aac41eb4ba2afb462e4ec95d
  teach_xs :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Teaching.teach14
                   Teaching.teach12) -}
fc09a216e6b17fd4619e8b6aa72898ab
  testAccuracy :: NeuralNetwork.NeuralNet -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Teaching.teach2
                  `cast`
                (<NeuralNetwork.NeuralNet>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
3bb0306c976ac6c52adcbadf2dbf6930
  testLabPath :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Teaching.testLabPath1) -}
dce9cc7d37969a89dfd6bf278cf3b920
  testLabPath1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data\\t10k-labels.idx1-ubyte"#) -}
2101a92172fb6ed21c65dfe57c32a378
  testNet ::
    NeuralNetwork.NeuralNet
    -> [[GHC.Types.Double]]
    -> [GHC.Types.Int]
    -> NeuralNetwork.ActivationFunction
    -> GHC.Types.Int
  {- Arity: 4, Strictness: <L,U><S,1*U><L,1*U><L,U(C(U),A,A)>m,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: NeuralNetwork.NeuralNet)
                   (w1 :: [[GHC.Types.Double]])
                   (w2 :: [GHC.Types.Int])
                   (w3 :: NeuralNetwork.ActivationFunction) ->
                 case Teaching.$wtestNet w w1 w2 w3 of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
30b3f82fa3ec3652095d18c336196e34
  testPath :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Teaching.testPath1) -}
4f791c8862799f65f547f7e344d1cfb9
  testPath1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data\\t10k-images.idx3-ubyte"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

